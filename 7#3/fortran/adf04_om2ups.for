       program adf04_om2ups

       implicit none
c----------------------------------------------------------------------
c
c  ***************** fortran77 program: adf04_om2ups ******************
c
c  purpose:  Converts type 1 and type 5 adf04 datasets generated by
c            Autostructure in 'pwb' or 'dw' approximations to type 3.
C            The program is an outer handler for the primary processing
c            subroutine h9cvrt.for.  Input data file names follow the
c            specific expectations of Autostructure in the working
c            directory for the Autostructure runs.
c
c            Within adas7#3 the usual use is via perl scripts which
c            are tuned to execution under batch systems such as
c            loadleveller on the JET computers.
c            See in /home/adas/offline_adas/adas7#3/
c
c                  adas7#3_dw_llbatch.pl
c                  adas7#3_pwb_llbatch.pl
c
c            which process complete isoelectronic sequences.  Note the
c            additional scripts which prepare adf27 drivers from
c            templates prior to the mass production
c
c                  setup_isoseq_adf27.pl
c                  setup_isoseq_pwb_adf27.pl
c
c            The program may also be driven by command line options
c            specifying the input, output and an optional extra
c            option driver file.
c
c  program
c
c            An input dataset adf04_om is required in the directory from
c            which execution is initiated.  The output dataset adf04_ups
c            is sent to the same directory.
c
c            Alternatively input and output filenames can be supplied
c            on the command line as arguments. If absent the program
c            defaults to the above names.
c
c            If an adf37 electron energy distribution file and an adf04
c            output file type are specified, the output adf04 will be
c            a non-Maxwellian variant.
c
c            A file with a namelist can be used to specify kappa,
c            Druyvesteyn or adf37 distributions. To specify user
c            selected temperatures for the output adf04 the namelist
c            way is required. The namelist is called 'instruction'
c            and is defined:
c               adf04_in  = 'adf04_om'  ! input type 1 or 5 adf04 file
c               adf04_out = 'adf04_ups' ! output adf04 file
c               adf37     = 'NULL'      ! numerical distribution file
c               i04type   = -1          ! type 3 (Maxwellian) or 4 (asymmetrical
c                                       ! in output adf04 file (only for adf37)
c               kappa     = -99.0D0     ! kappa parameter
c               x         = -99.0D0     ! Druyvesteyn x parameter
c               numte     = 14          ! number of temperatures
c               ittype    = 3           ! 1 - Kelvin, 2 - eV, 3 - reduced
c               te()      =             ! array of temperatures
c
c           Specify with -f<filename> on command line. nb no space between
c           -f and the filename.
c
c           -h write usage instructions to screen and then quits.
c
c
c  author  : Martin O'Mullane
c  date    : 28-01-2011
c
c  version : 1.1
c  date    : 28-01-2011
c  modified: Martin O'Mullane
c            - First version
c
c  version : 1.2
c  date    : 21-11-2011
c  modified: Hugh Summers
c            - Included descriptor.
c              Substantial modification of associated subroutines to
c              correct Bryans/O'Mullane processing discrepancy and to
c              enable complex heavy systems with long configuration
c              strings and large level sets.
c
c  version : 1.3
c  date    : 19-11-2012
c  modified: Martin O'Mullane
c            - Allow input and output file names to be spcificied
c              as arguments. Default to adf04_om and adf04_ups.
c
c  version : 1.4
c  date    : 05-12-2012
c  modified: Martin O'Mullane
c            - Activate the non-Maxwellian parts of the code by
c              adding (optional) adf37 and adf04 output type as
c              command line parameters.
c
c  version : 1.5
c  date    : 25-03-2013
c  modified: Martin O'Mullane
c            - Output options can be secified in a namelist via
c              the -f<filename> option. No other arguments are
c              allowed in this case.
c            - More error checking on inputs.
c            - Calling arguments of h9cvrt are changed.
c
c  version : 1.6
c  date    : 05-09-2018
c  modified: Martin O'Mullane
c            - Minor changes to documentation at top.
c
c  version : 1.7
c  date    : 18-02-2020
c  modified: Martin O'Mullane
c            - Add usage message if passed -h.
c
c----------------------------------------------------------------------


c----------------------------------------------------------------------
       integer   iargc      , n_arg        , numte         ,
     &           i04type    , iadftyp_out  , ittype        , dtype
       integer   iz1        , i
c----------------------------------------------------------------------
       character infile*120 , distfile*210 , outfile*120   ,
     &           argstr*120 , adf04_in*120 , adf04_out*120 ,
     &           adf37*120  , ctype*1
c----------------------------------------------------------------------
       real*8    kappa      , x            , fmul
c----------------------------------------------------------------------
       real*8    temps(14)  , te(50)
c----------------------------------------------------------------------
       data temps /1.00d+02,2.00d+02,5.00d+02,1.00d+03,2.00d+03,
     &             5.00d+03,1.00d+04,2.00d+04,5.00d+04,1.00d+05,
     &             2.00d+05,5.00d+05,1.00d+06,2.00d+06/
c----------------------------------------------------------------------

c Define instruction namelist and set defaults

       namelist /instruction/ adf04_in, adf04_out, adf37, i04type,
     &                        kappa, x, numte, te, ittype

       adf04_in  = 'adf04_om'
       adf04_out = 'adf04_ups'
       adf37     = 'NULL'
       i04type   = -1
       kappa     = -99.0D0
       x         = -99.0D0
       numte     = 14
       ittype    = 3
       do i = 1, numte
          te(i) = temps(i)
       end do

C Define defaults for normal command line arguments

       infile      = 'adf04_om'
       outfile     = 'adf04_ups'
       distfile    = 'NULL'
       iadftyp_out = 3
       dtype       = 0

C Parse and error check the command line

       n_arg = iargc()

       if (n_arg.eq.0) then

          write(0,*)'Using adf04_om as input and adf04_ups as output'

       elseif (n_arg.eq.1) then

          call getarg(1,argstr)

          if (index(argstr, '-h').eq.1) then
             write(0,*)'adf04_om2ups usage'
             write(0,*)'------------------'
             write(0,*)''
             write(0,*)'With no arguments an input dataset named ',
     &                 'adf04_om is required'
             write(0,*)'and an output dataset named adf04_ups is ',
     &                 'produced.'
             write(0,*)''
             write(0,*)'Two arguments are interpeted as input and ',
     &                 'output filenames.'
             write(0,*)''
             write(0,*)'Four arguments are interpreted as input and ',
     &                 'output filenames,'
             write(0,*)'an adf37 electron energy distribution file ',
     &                 'and an output '
             write(0,*)'adf04 file type.'
             write(0,*)''
             write(0,*)'If -f is specified one instruction file is ',
     &                 'expected. Note that '
             write(0,*)'there is no space between -f and the filename.'
             return
          endif

          if (index(argstr, '-f').eq.1) then

             write(0,*)'Reading instructions from a file'

             open(unit=32, file=argstr(3:120), status='old')
             read(32, instruction)
             close(32)

             if (numte.GT.50) then
                write(0,*)'There is a maximum of 50 temperatures'
                stop
             endif

             infile   = adf04_in
             outfile  = adf04_out
             distfile = adf37

             if (kappa.eq.-99.0D0.and.
     &            x.eq.-99.0D0   .and.
     &            adf37(1:4).eq.'NULL') then
                dtype = 0
                iadftyp_out = 3
             endif

             if (kappa.ne.-99.0D0) then
                if (x.ne.-99.0D0.or.adf37(1:4).ne.'NULL') then
                   write(0,*)'Only one type allowed'
                   stop
                else
                   dtype = 1
                   iadftyp_out = 4
                endif
             endif

             if (x.ne.-99.0D0) then
                if (kappa.ne.-99.0D0.or.adf37(1:4).ne.'NULL') then
                   write(0,*)'Only one type allowed'
                   stop
                else
                   dtype = 3
                   iadftyp_out = 4
                endif
             endif

             if (adf37(1:4).ne.'NULL') then
                if (kappa.ne.-99.0D0.or.x.ne.-99.0D0) then
                   write(0,*)'Only one type allowed'
                   stop
                else
                   if (i04type.eq.-1) then
                      write(0,*)'Supply the adf04 type as well'
                      stop
                   else
                      if (.not.(i04type.eq.3.or.i04type.eq.4)) then
                         write(0,*)'Type must be 3 or 4'
                         stop
                      endif
                      iadftyp_out = i04type
                   endif
                   dtype = 2
                endif
             endif

          else

             infile = argstr
             write(0,*)'Using adf04_ups as output'

          endif

       elseif (iargc().eq.2) then

          call getarg(1,argstr)
          if (index(argstr, '-f').EQ.1) then
             write(0,*)'No space between -f and instruction file name'
             stop
          else
             infile = argstr
          endif
          call getarg(2,outfile)

       elseif (iargc().eq.3) then

          write(0, *)'Supply the adf04 type as well'
          stop

       elseif (iargc().eq.4) then

          call getarg(1,infile)
          call getarg(2,outfile)
          call getarg(3,distfile)
          call getarg(4,ctype)
          read(ctype, *)iadftyp_out

       endif

C Get iz1 from adf04 input and convert temperatures to K

       open(unit=32, file=infile, status='old')
       read(32,'(15x,i10)')iz1
       close(32)

       if (ittype.eq.1) then
          fmul = 1.0D0
       elseif (ittype.eq.2) then
          fmul = 11605.0D0
       else
          fmul = iz1**2.0D0
       endif

       do i = 1, numte
         te(i) = fmul * te(i)
       end do

C Convolve the cross sections with the distribution function
C and send the results to the output adf04 file.

       call h9cvrt(infile      , outfile , distfile ,
     &             dtype       , kappa   , x        ,
     &             iadftyp_out ,
     &             numte       , te
     &            )

       end
